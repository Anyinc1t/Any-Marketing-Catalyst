
next.config.ts:
  29  
  30: export default nextConfig;

package-lock.json:
  1674      },
  1675:     "node_modules/@opentelemetry/exporter-trace-otlp-grpc": {
  1676        "version": "0.52.1",
  1677:       "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-grpc/-/exporter-trace-otlp-grpc-0.52.1.tgz",
  1678        "integrity": "sha512-pVkSH20crBwMTqB3nIN4jpQKUEoB0Z94drIHpYyEqs7UBr+I0cpYyOR3bqjA/UasQUMROb3GX8ZX4/9cVRqGBQ==",

  1682          "@opentelemetry/core": "1.25.1",
  1683:         "@opentelemetry/otlp-grpc-exporter-base": "0.52.1",
  1684          "@opentelemetry/otlp-transformer": "0.52.1",

  1694      },
  1695:     "node_modules/@opentelemetry/exporter-trace-otlp-grpc/node_modules/@opentelemetry/core": {
  1696        "version": "1.25.1",

  1709      },
  1710:     "node_modules/@opentelemetry/exporter-trace-otlp-grpc/node_modules/@opentelemetry/resources": {
  1711        "version": "1.25.1",

  1725      },
  1726:     "node_modules/@opentelemetry/exporter-trace-otlp-grpc/node_modules/@opentelemetry/sdk-trace-base": {
  1727        "version": "1.25.1",

  1742      },
  1743:     "node_modules/@opentelemetry/exporter-trace-otlp-grpc/node_modules/@opentelemetry/semantic-conventions": {
  1744        "version": "1.25.1",

  1751      },
  1752:     "node_modules/@opentelemetry/exporter-trace-otlp-http": {
  1753        "version": "0.52.1",
  1754:       "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-http/-/exporter-trace-otlp-http-0.52.1.tgz",
  1755        "integrity": "sha512-05HcNizx0BxcFKKnS5rwOV+2GevLTVIRA0tRgWYyw4yCgR53Ic/xk83toYKts7kbzcI+dswInUg/4s8oyA+tqg==",

  1758          "@opentelemetry/core": "1.25.1",
  1759:         "@opentelemetry/otlp-exporter-base": "0.52.1",
  1760          "@opentelemetry/otlp-transformer": "0.52.1",

  1770      },
  1771:     "node_modules/@opentelemetry/exporter-trace-otlp-http/node_modules/@opentelemetry/core": {
  1772        "version": "1.25.1",

  1785      },
  1786:     "node_modules/@opentelemetry/exporter-trace-otlp-http/node_modules/@opentelemetry/resources": {
  1787        "version": "1.25.1",

  1801      },
  1802:     "node_modules/@opentelemetry/exporter-trace-otlp-http/node_modules/@opentelemetry/sdk-trace-base": {
  1803        "version": "1.25.1",

  1818      },
  1819:     "node_modules/@opentelemetry/exporter-trace-otlp-http/node_modules/@opentelemetry/semantic-conventions": {
  1820        "version": "1.25.1",

  1827      },
  1828:     "node_modules/@opentelemetry/exporter-trace-otlp-proto": {
  1829        "version": "0.52.1",
  1830:       "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-proto/-/exporter-trace-otlp-proto-0.52.1.tgz",
  1831        "integrity": "sha512-pt6uX0noTQReHXNeEslQv7x311/F1gJzMnp1HD2qgypLRPbXDeMzzeTngRTUaUbP6hqWNtPxuLr4DEoZG+TcEQ==",

  1834          "@opentelemetry/core": "1.25.1",
  1835:         "@opentelemetry/otlp-exporter-base": "0.52.1",
  1836          "@opentelemetry/otlp-transformer": "0.52.1",

  1846      },
  1847:     "node_modules/@opentelemetry/exporter-trace-otlp-proto/node_modules/@opentelemetry/core": {
  1848        "version": "1.25.1",

  1861      },
  1862:     "node_modules/@opentelemetry/exporter-trace-otlp-proto/node_modules/@opentelemetry/resources": {
  1863        "version": "1.25.1",

  1877      },
  1878:     "node_modules/@opentelemetry/exporter-trace-otlp-proto/node_modules/@opentelemetry/sdk-trace-base": {
  1879        "version": "1.25.1",

  1894      },
  1895:     "node_modules/@opentelemetry/exporter-trace-otlp-proto/node_modules/@opentelemetry/semantic-conventions": {
  1896        "version": "1.25.1",

  1903      },
  1904:     "node_modules/@opentelemetry/exporter-zipkin": {
  1905        "version": "1.25.1",
  1906:       "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-zipkin/-/exporter-zipkin-1.25.1.tgz",
  1907        "integrity": "sha512-RmOwSvkimg7ETwJbUOPTMhJm9A9bG1U8s7Zo3ajDh4zM7eYcycQ0dM7FbLD6NXWbI2yj7UY4q8BKinKYBQksyw==",

  1921      },
  1922:     "node_modules/@opentelemetry/exporter-zipkin/node_modules/@opentelemetry/core": {
  1923        "version": "1.25.1",

  1936      },
  1937:     "node_modules/@opentelemetry/exporter-zipkin/node_modules/@opentelemetry/resources": {
  1938        "version": "1.25.1",

  1952      },
  1953:     "node_modules/@opentelemetry/exporter-zipkin/node_modules/@opentelemetry/sdk-trace-base": {
  1954        "version": "1.25.1",

  1969      },
  1970:     "node_modules/@opentelemetry/exporter-zipkin/node_modules/@opentelemetry/semantic-conventions": {
  1971        "version": "1.25.1",

  1998      },
  1999:     "node_modules/@opentelemetry/otlp-exporter-base": {
  2000        "version": "0.52.1",
  2001:       "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-exporter-base/-/otlp-exporter-base-0.52.1.tgz",
  2002        "integrity": "sha512-z175NXOtX5ihdlshtYBe5RpGeBoTXVCKPPLiQlD6FHvpM4Ch+p2B0yWKYSrBfLH24H9zjJiBdTrtD+hLlfnXEQ==",

  2014      },
  2015:     "node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core": {
  2016        "version": "1.25.1",

  2029      },
  2030:     "node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/semantic-conventions": {
  2031        "version": "1.25.1",

  2038      },
  2039:     "node_modules/@opentelemetry/otlp-grpc-exporter-base": {
  2040        "version": "0.52.1",
  2041:       "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-grpc-exporter-base/-/otlp-grpc-exporter-base-0.52.1.tgz",
  2042        "integrity": "sha512-zo/YrSDmKMjG+vPeA9aBBrsQM9Q/f2zo6N04WMB3yNldJRsgpRBeLLwvAt/Ba7dpehDLOEFBd1i2JCoaFtpCoQ==",

  2046          "@opentelemetry/core": "1.25.1",
  2047:         "@opentelemetry/otlp-exporter-base": "0.52.1",
  2048          "@opentelemetry/otlp-transformer": "0.52.1"

  2056      },
  2057:     "node_modules/@opentelemetry/otlp-grpc-exporter-base/node_modules/@opentelemetry/core": {
  2058        "version": "1.25.1",

  2071      },
  2072:     "node_modules/@opentelemetry/otlp-grpc-exporter-base/node_modules/@opentelemetry/semantic-conventions": {
  2073        "version": "1.25.1",

  2350          "@opentelemetry/core": "1.25.1",
  2351:         "@opentelemetry/exporter-trace-otlp-grpc": "0.52.1",
  2352:         "@opentelemetry/exporter-trace-otlp-http": "0.52.1",
  2353:         "@opentelemetry/exporter-trace-otlp-proto": "0.52.1",
  2354:         "@opentelemetry/exporter-zipkin": "1.25.1",
  2355          "@opentelemetry/instrumentation": "0.52.1",

postcss.config.mjs:
  7  
  8: export default config;

tailwind.config.ts:
  2  
  3: export default {
  4    darkMode: ['class'],

src/middleware.ts:
  24  
  25: export function middleware(request: NextRequest) {
  26    const pathname = request.nextUrl.pathname;

  60  
  61: export const config = {
  62    matcher: [

src/ai/genkit.ts:
  3  
  4: export const ai = genkit({
  5    plugins: [googleAI()],

src/ai/flows/generate-marketing-idea.ts:
  22  
  23: export type GenerateMarketingIdeaInput = z.infer<
  24    typeof GenerateMarketingIdeaInputSchema

  33  
  34: export type GenerateMarketingIdeaOutput = z.infer<
  35    typeof GenerateMarketingIdeaOutputSchema

  38  // Define the wrapper function
  39: export async function generateMarketingIdea(
  40    input: GenerateMarketingIdeaInput

src/app/layout.tsx:
  16  // Basic metadata for the root layout. More specific metadata will be in [lang]/layout.tsx
  17: export const metadata: Metadata = {
  18    title: 'ANY Marketing Catalyst', // Generic title

  21  
  22: export default function RootLayout({
  23    children,

src/app/[lang]/layout.tsx:
   9  // This function generates metadata for language-specific pages.
  10: export async function generateMetadata({ params: { lang } }: { params: { lang: Locale } }): Promise<Metadata> {
  11    const dict = await getDictionary(lang);

  47  // It no longer renders <html> or <body> as that's handled by src/app/layout.tsx.
  48: export default async function LangLayout({
  49    children,

src/app/[lang]/page.tsx:
  13  // It should only return the content for the page, not any <html> or layout structure.
  14: export default async function HomePage({ params: { lang } }: { params: { lang: Locale } }) {
  15    const dict = await getDictionary(lang);

src/app/[lang]/contact/page.tsx:
   9  
  10: export async function generateMetadata({ params: { lang } }: { params: { lang: Locale } }) {
  11    const dict = await getDictionary(lang);

  23  
  24: export default async function ContactPage({ params: { lang } }: { params: { lang: Locale } }) {
  25    const dict = await getDictionary(lang);

src/app/[lang]/projects/page.tsx:
   6  
   7: export async function generateMetadata({ params: { lang } }: { params: { lang: Locale } }) {
   8    const dict = await getDictionary(lang);

  21  
  22: export default async function ProjectsPage({ params: { lang } }: { params: { lang: Locale } }) {
  23    const dict = await getDictionary(lang);

src/app/[lang]/services/page.tsx:
  10  
  11: export async function generateMetadata({ params: { lang } }: { params: { lang: Locale } }) {
  12    const dict = await getDictionary(lang);

  24  
  25: export default async function ServicesPage({ params: { lang } }: { params: { lang: Locale } }) {
  26    const dict = await getDictionary(lang);

src/components/Footer.tsx:
  23  
  24: export default Footer;

src/components/Hero.tsx:
  70  
  71: export default Hero;

src/components/PricingSection.tsx:
  71  
  72: export default PricingSection;

src/components/Process.tsx:
  67  
  68: export default Process;

src/components/ProjectListDisplay.tsx:
  16  
  17: export default function ProjectListDisplay({ projects, hideDetailsText }: ProjectListDisplayProps) {
  18    const [expandedProjects, setExpandedProjects] = useState<Record<string, boolean>>({});

src/components/Services.tsx:
  62  
  63: export default Services;

src/components/Testimonials.tsx:
  137  
  138: export default Testimonials;

src/components/ai/MarketingIdeaGenerator.tsx:
  89  
  90: export default MarketingIdeaGenerator;

src/components/forms/LeadForm.tsx:
  70  
  71: export default LeadForm;

src/components/layout/MainHeader.tsx:
  143  
  144: export default MainHeader;

src/components/sections/ContactSection.tsx:
  34  
  35: export default ContactSection;

src/components/ui/accordion.tsx:
  57  
  58: export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

src/components/ui/alert-dialog.tsx:
  128  
  129: export {
  130    AlertDialog,

src/components/ui/alert.tsx:
  58  
  59: export { Alert, AlertTitle, AlertDescription }

src/components/ui/AnimatedWrapper.tsx:
  43  
  44: export default AnimatedWrapper;

src/components/ui/avatar.tsx:
  49  
  50: export { Avatar, AvatarImage, AvatarFallback }

src/components/ui/badge.tsx:
  25  
  26: export interface BadgeProps
  27    extends React.HTMLAttributes<HTMLDivElement>,

  35  
  36: export { Badge, badgeVariants }

src/components/ui/button.tsx:
  35  
  36: export interface ButtonProps
  37    extends React.ButtonHTMLAttributes<HTMLButtonElement>,

  55  
  56: export { Button, buttonVariants }

src/components/ui/calendar.tsx:
   9  
  10: export type CalendarProps = React.ComponentProps<typeof DayPicker>
  11  

  69  
  70: export { Calendar }

src/components/ui/card.tsx:
  78  
  79: export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

src/components/ui/chart.tsx:
   10  
   11: export type ChartConfig = {
   12    [k in string]: {

  357  
  358: export {
  359    ChartContainer,

src/components/ui/checkbox.tsx:
  29  
  30: export { Checkbox }

src/components/ui/dialog.tsx:
  110  
  111: export {
  112    Dialog,

src/components/ui/dropdown-menu.tsx:
  183  
  184: export {
  185    DropdownMenu,

src/components/ui/form.tsx:
  168  
  169: export {
  170    useFormField,

src/components/ui/input.tsx:
  21  
  22: export { Input }

src/components/ui/label.tsx:
  25  
  26: export { Label }

src/components/ui/menubar.tsx:
  238  
  239: export {
  240    Menubar,

src/components/ui/popover.tsx:
  30  
  31: export { Popover, PopoverTrigger, PopoverContent }

src/components/ui/progress.tsx:
  27  
  28: export { Progress }

src/components/ui/radio-group.tsx:
  43  
  44: export { RadioGroup, RadioGroupItem }

src/components/ui/scroll-area.tsx:
  47  
  48: export { ScrollArea, ScrollBar }

src/components/ui/select.tsx:
  148  
  149: export {
  150    Select,

src/components/ui/separator.tsx:
  30  
  31: export { Separator }

src/components/ui/sheet.tsx:
  128  
  129: export {
  130    Sheet,

src/components/ui/sidebar.tsx:
  737  
  738: export {
  739    Sidebar,

src/components/ui/skeleton.tsx:
  14  
  15: export { Skeleton }

src/components/ui/slider.tsx:
  27  
  28: export { Slider }

src/components/ui/switch.tsx:
  28  
  29: export { Switch }

src/components/ui/table.tsx:
  107  
  108: export {
  109    Table,

src/components/ui/tabs.tsx:
  54  
  55: export { Tabs, TabsList, TabsTrigger, TabsContent }

src/components/ui/textarea.tsx:
  20  
  21: export {Textarea};

src/components/ui/toast.tsx:
  118  
  119: export {
  120    type ToastProps,

src/components/ui/toaster.tsx:
  12  
  13: export function Toaster() {
  14    const { toasts } = useToast()

src/components/ui/tooltip.tsx:
  29  
  30: export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

src/hooks/use-mobile.tsx:
  4  
  5: export function useIsMobile() {
  6    const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

src/hooks/use-toast.ts:
   76  
   77: export const reducer = (state: State, action: Action): State => {
   78    switch (action.type) {

  193  
  194: export { useToast, toast }

src/lib/dictionaries.ts:
    4  
    5: export const i18n = {
    6    defaultLocale: 'en',

    9  
   10: export type Locale = (typeof i18n.locales)[number];
   11  
   12: export type Dictionary = {
   13    metadata: {

  133  
  134: export const MINIMAL_FALLBACK_DICTIONARY: Dictionary = {
  135    metadata: {

  323  
  324: export const getDictionary = cache(async (locale: Locale): Promise<Dictionary> => {
  325    const loadDict = dictionaries[locale] || dictionaries.en;

  337  
  338: export interface LocaleLinkProps {
  339    href: string;

  347  // This function is not directly used by getDictionary but useful for middleware or server components
  348: export function getLocaleFromRequest(request: { headers: Headers, cookies: NextRequest['cookies'] }): Locale {
  349    // 1. Check cookie

src/lib/utils.ts:
  3  
  4: export function cn(...inputs: ClassValue[]) {
  5    return twMerge(clsx(inputs))
